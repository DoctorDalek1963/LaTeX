#!/usr/bin/env python
"""A simple script to remove auxiliary files generated by LaTeX compilation and move PDF files into the correct directory."""

import os
from glob import glob
from typing import List, Callable, Optional
import sys

GLOB_EXTENSIONS = ('*.log', '*.aux', '*.dvi', '*.lof', '*.lot', '*.bit', '*.idx', '*.glo', '*.bbl', '*.bcf', '*.ilg', '*.toc', '*.ind', '*.out', '*.blg', '*.fdb_latexmk', '*.fls', '*.run.xml', '*.synctex.gz')


def clean_files(directory: str = None) -> None:
    """Remove auxiliary files generated by LaTeX compilation."""
    direc = directory + os.sep if directory is not None else ''

    # This sum is to remove any empty lists caused by failed matches, and to flatten the list
    # It's not supposed to be used like this, but it works
    auxiliary_files: List[str] = sum([glob(direc + extension) for extension in GLOB_EXTENSIONS], [])

    for f in auxiliary_files:
        os.remove(f)


def move_pdfs(directory: str = None) -> None:
    """Move PDF files into the correct directory."""
    direc = directory + os.sep if directory is not None else ''
    pdfs = glob(direc + '*.pdf')

    for pdf in pdfs:
        new = direc + 'PDFs' + os.sep + os.path.split(pdf)[-1]

        try:
            os.remove(new)
        except FileNotFoundError:
            pass

        os.rename(pdf, new)


def do_all(func: Callable[[Optional[str]], None]) -> None:
    """Run a function for all subdirectories."""
    for d in os.listdir():
        func(d)


if __name__ == "__main__":
    if len(sys.argv) == 1:  # If no args
        do_all(clean_files)
        do_all(move_pdfs)
    elif sys.argv[1] == 'clean':
        do_all(clean_files)
    elif sys.argv[1] == 'move':
        do_all(move_pdfs)
    else:
        print(f'Unrecognised argument "{sys.argv[1]}"')
        print(f'Usage: ./{sys.argv[0].split(os.sep)[-1]} [ clean | move ]')
